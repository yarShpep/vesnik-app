from aiogram import types, Router
from aiogram.filters import Command
from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from services.api_client import get_latest_incidents

__all__ = ["router"]

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    web_app = WebAppInfo(url="https://vesnik-frontend.vercel.app")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –í–µ—Å—Ç–Ω–∏–∫ üß≠", web_app=web_app)]],
        resize_keyboard=True
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–µ—Å—Ç–Ω–∏–∫ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /latest
@router.message(Command("latest"))
async def cmd_latest(message: types.Message):
    incidents = await get_latest_incidents()
    if not incidents:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π.")
        return
    for inc in incidents:
        msg = f"üìç *{inc['category']}*\n{inc['region']}, {inc['station']}\nüïí {inc['timestamp']}\n‚úâÔ∏è {inc['description']}"
        await message.answer(msg, parse_mode='Markdown')